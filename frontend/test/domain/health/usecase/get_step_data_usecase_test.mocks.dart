// Mocks generated by Mockito 5.4.5 from annotations
// in frontend/test/domain/health/usecase/get_step_data_usecase_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:frontend/domain/core/entity/health_data.dart' as _i4;
import 'package:frontend/domain/core/type/health_data_type.dart' as _i5;
import 'package:frontend/domain/health/repository/health_repository.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [HealthRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockHealthRepository extends _i1.Mock implements _i2.HealthRepository {
  MockHealthRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i4.HealthData>> getStepData({
    required DateTime? startDate,
    required DateTime? endDate,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getStepData,
          [],
          {
            #startDate: startDate,
            #endDate: endDate,
          },
        ),
        returnValue: _i3.Future<List<_i4.HealthData>>.value(<_i4.HealthData>[]),
      ) as _i3.Future<List<_i4.HealthData>>);

  @override
  _i3.Future<_i4.HealthData?> getTodayStepData() => (super.noSuchMethod(
        Invocation.method(
          #getTodayStepData,
          [],
        ),
        returnValue: _i3.Future<_i4.HealthData?>.value(),
      ) as _i3.Future<_i4.HealthData?>);

  @override
  _i3.Future<_i4.HealthData?> getStepDataForDate(DateTime? date) =>
      (super.noSuchMethod(
        Invocation.method(
          #getStepDataForDate,
          [date],
        ),
        returnValue: _i3.Future<_i4.HealthData?>.value(),
      ) as _i3.Future<_i4.HealthData?>);

  @override
  _i3.Future<bool> requestHealthPermission() => (super.noSuchMethod(
        Invocation.method(
          #requestHealthPermission,
          [],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<bool> hasHealthPermission() => (super.noSuchMethod(
        Invocation.method(
          #hasHealthPermission,
          [],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<void> syncHealthData() => (super.noSuchMethod(
        Invocation.method(
          #syncHealthData,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Stream<_i4.HealthData?> watchTodaySteps() => (super.noSuchMethod(
        Invocation.method(
          #watchTodaySteps,
          [],
        ),
        returnValue: _i3.Stream<_i4.HealthData?>.empty(),
      ) as _i3.Stream<_i4.HealthData?>);

  @override
  _i3.Stream<List<_i4.HealthData>> watchHealthData({
    required DateTime? startDate,
    required DateTime? endDate,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #watchHealthData,
          [],
          {
            #startDate: startDate,
            #endDate: endDate,
          },
        ),
        returnValue: _i3.Stream<List<_i4.HealthData>>.empty(),
      ) as _i3.Stream<List<_i4.HealthData>>);

  @override
  _i3.Stream<_i5.SyncStatus> watchSyncStatus() => (super.noSuchMethod(
        Invocation.method(
          #watchSyncStatus,
          [],
        ),
        returnValue: _i3.Stream<_i5.SyncStatus>.empty(),
      ) as _i3.Stream<_i5.SyncStatus>);

  @override
  _i3.Future<void> clearLocalHealthData({
    DateTime? startDate,
    DateTime? endDate,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #clearLocalHealthData,
          [],
          {
            #startDate: startDate,
            #endDate: endDate,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<Map<String, dynamic>> getHealthStatistics({
    required _i5.DateRangeType? period,
    DateTime? startDate,
    DateTime? endDate,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getHealthStatistics,
          [],
          {
            #period: period,
            #startDate: startDate,
            #endDate: endDate,
          },
        ),
        returnValue:
            _i3.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i3.Future<Map<String, dynamic>>);

  @override
  _i3.Future<void> setBackgroundSyncEnabled(bool? enabled) =>
      (super.noSuchMethod(
        Invocation.method(
          #setBackgroundSyncEnabled,
          [enabled],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<DateTime?> getLastSyncTime() => (super.noSuchMethod(
        Invocation.method(
          #getLastSyncTime,
          [],
        ),
        returnValue: _i3.Future<DateTime?>.value(),
      ) as _i3.Future<DateTime?>);
}
