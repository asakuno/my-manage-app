// Mocks generated by Mockito 5.4.5 from annotations
// in frontend/test/data/repository/health_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:frontend/data/api/health_api_data_source.dart' as _i5;
import 'package:frontend/data/local/health_local_data_source.dart' as _i2;
import 'package:frontend/domain/core/entity/health_data.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [HealthLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockHealthLocalDataSource extends _i1.Mock
    implements _i2.HealthLocalDataSource {
  MockHealthLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get dataCount => (super.noSuchMethod(
        Invocation.getter(#dataCount),
        returnValue: 0,
      ) as int);

  @override
  _i3.Future<void> initialize() => (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> initializeForTest() => (super.noSuchMethod(
        Invocation.method(
          #initializeForTest,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> saveHealthData(_i4.HealthData? healthData) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveHealthData,
          [healthData],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> saveHealthDataList(List<_i4.HealthData>? healthDataList) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveHealthDataList,
          [healthDataList],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<_i4.HealthData?> getHealthData(DateTime? date) =>
      (super.noSuchMethod(
        Invocation.method(
          #getHealthData,
          [date],
        ),
        returnValue: _i3.Future<_i4.HealthData?>.value(),
      ) as _i3.Future<_i4.HealthData?>);

  @override
  _i3.Future<List<_i4.HealthData>> getHealthDataRange(
    DateTime? startDate,
    DateTime? endDate,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getHealthDataRange,
          [
            startDate,
            endDate,
          ],
        ),
        returnValue: _i3.Future<List<_i4.HealthData>>.value(<_i4.HealthData>[]),
      ) as _i3.Future<List<_i4.HealthData>>);

  @override
  _i3.Future<_i4.HealthData?> getLatestHealthData() => (super.noSuchMethod(
        Invocation.method(
          #getLatestHealthData,
          [],
        ),
        returnValue: _i3.Future<_i4.HealthData?>.value(),
      ) as _i3.Future<_i4.HealthData?>);

  @override
  _i3.Future<List<_i4.HealthData>> getPendingSyncData() => (super.noSuchMethod(
        Invocation.method(
          #getPendingSyncData,
          [],
        ),
        returnValue: _i3.Future<List<_i4.HealthData>>.value(<_i4.HealthData>[]),
      ) as _i3.Future<List<_i4.HealthData>>);

  @override
  _i3.Future<void> deleteHealthData(DateTime? date) => (super.noSuchMethod(
        Invocation.method(
          #deleteHealthData,
          [date],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> deleteHealthDataRange(
    DateTime? startDate,
    DateTime? endDate,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteHealthDataRange,
          [
            startDate,
            endDate,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> clearAllHealthData() => (super.noSuchMethod(
        Invocation.method(
          #clearAllHealthData,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  bool hasData(DateTime? date) => (super.noSuchMethod(
        Invocation.method(
          #hasData,
          [date],
        ),
        returnValue: false,
      ) as bool);

  @override
  _i3.Future<Map<String, dynamic>> getStatistics() => (super.noSuchMethod(
        Invocation.method(
          #getStatistics,
          [],
        ),
        returnValue:
            _i3.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i3.Future<Map<String, dynamic>>);

  @override
  _i3.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}

/// A class which mocks [HealthApiDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockHealthApiDataSource extends _i1.Mock
    implements _i5.HealthApiDataSource {
  MockHealthApiDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<bool> requestHealthPermission() => (super.noSuchMethod(
        Invocation.method(
          #requestHealthPermission,
          [],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<bool> hasHealthPermission() => (super.noSuchMethod(
        Invocation.method(
          #hasHealthPermission,
          [],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<_i4.HealthData?> getHealthDataForDate(DateTime? date) =>
      (super.noSuchMethod(
        Invocation.method(
          #getHealthDataForDate,
          [date],
        ),
        returnValue: _i3.Future<_i4.HealthData?>.value(),
      ) as _i3.Future<_i4.HealthData?>);

  @override
  _i3.Future<List<_i4.HealthData>> getHealthDataRange(
    DateTime? startDate,
    DateTime? endDate,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getHealthDataRange,
          [
            startDate,
            endDate,
          ],
        ),
        returnValue: _i3.Future<List<_i4.HealthData>>.value(<_i4.HealthData>[]),
      ) as _i3.Future<List<_i4.HealthData>>);

  @override
  _i3.Future<_i4.HealthData?> getTodayHealthData() => (super.noSuchMethod(
        Invocation.method(
          #getTodayHealthData,
          [],
        ),
        returnValue: _i3.Future<_i4.HealthData?>.value(),
      ) as _i3.Future<_i4.HealthData?>);

  @override
  _i3.Future<_i4.HealthData?> getLatestHealthData() => (super.noSuchMethod(
        Invocation.method(
          #getLatestHealthData,
          [],
        ),
        returnValue: _i3.Future<_i4.HealthData?>.value(),
      ) as _i3.Future<_i4.HealthData?>);

  @override
  _i3.Future<void> syncHealthData() => (super.noSuchMethod(
        Invocation.method(
          #syncHealthData,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}
