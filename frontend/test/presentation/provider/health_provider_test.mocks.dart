// Mocks generated by Mockito 5.4.5 from annotations
// in frontend/test/presentation/provider/health_provider_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:frontend/data/api/health_api_data_source.dart' as _i8;
import 'package:frontend/data/local/health_local_data_source.dart' as _i7;
import 'package:frontend/data/repository/health_repository_impl.dart' as _i3;
import 'package:frontend/domain/core/entity/activity_visualization.dart' as _i2;
import 'package:frontend/domain/core/entity/health_data.dart' as _i5;
import 'package:frontend/domain/core/type/activity_level_type.dart' as _i11;
import 'package:frontend/domain/core/type/health_data_type.dart' as _i6;
import 'package:frontend/domain/health/usecase/calculate_activity_level_usecase.dart'
    as _i10;
import 'package:frontend/domain/health/usecase/get_step_data_usecase.dart'
    as _i9;
import 'package:frontend/domain/health/usecase/sync_health_data_usecase.dart'
    as _i12;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeActivityVisualization_0 extends _i1.SmartFake
    implements _i2.ActivityVisualization {
  _FakeActivityVisualization_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [HealthRepositoryImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockHealthRepositoryImpl extends _i1.Mock
    implements _i3.HealthRepositoryImpl {
  MockHealthRepositoryImpl() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i5.HealthData>> getStepData({
    required DateTime? startDate,
    required DateTime? endDate,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getStepData,
          [],
          {
            #startDate: startDate,
            #endDate: endDate,
          },
        ),
        returnValue: _i4.Future<List<_i5.HealthData>>.value(<_i5.HealthData>[]),
      ) as _i4.Future<List<_i5.HealthData>>);

  @override
  _i4.Future<_i5.HealthData?> getTodayStepData() => (super.noSuchMethod(
        Invocation.method(
          #getTodayStepData,
          [],
        ),
        returnValue: _i4.Future<_i5.HealthData?>.value(),
      ) as _i4.Future<_i5.HealthData?>);

  @override
  _i4.Future<_i5.HealthData?> getStepDataForDate(DateTime? date) =>
      (super.noSuchMethod(
        Invocation.method(
          #getStepDataForDate,
          [date],
        ),
        returnValue: _i4.Future<_i5.HealthData?>.value(),
      ) as _i4.Future<_i5.HealthData?>);

  @override
  _i4.Future<bool> requestHealthPermission() => (super.noSuchMethod(
        Invocation.method(
          #requestHealthPermission,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<bool> hasHealthPermission() => (super.noSuchMethod(
        Invocation.method(
          #hasHealthPermission,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<void> syncHealthData() => (super.noSuchMethod(
        Invocation.method(
          #syncHealthData,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Stream<_i5.HealthData?> watchTodaySteps() => (super.noSuchMethod(
        Invocation.method(
          #watchTodaySteps,
          [],
        ),
        returnValue: _i4.Stream<_i5.HealthData?>.empty(),
      ) as _i4.Stream<_i5.HealthData?>);

  @override
  _i4.Stream<List<_i5.HealthData>> watchHealthData({
    required DateTime? startDate,
    required DateTime? endDate,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #watchHealthData,
          [],
          {
            #startDate: startDate,
            #endDate: endDate,
          },
        ),
        returnValue: _i4.Stream<List<_i5.HealthData>>.empty(),
      ) as _i4.Stream<List<_i5.HealthData>>);

  @override
  _i4.Stream<_i6.SyncStatus> watchSyncStatus() => (super.noSuchMethod(
        Invocation.method(
          #watchSyncStatus,
          [],
        ),
        returnValue: _i4.Stream<_i6.SyncStatus>.empty(),
      ) as _i4.Stream<_i6.SyncStatus>);

  @override
  _i4.Future<void> clearLocalHealthData({
    DateTime? startDate,
    DateTime? endDate,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #clearLocalHealthData,
          [],
          {
            #startDate: startDate,
            #endDate: endDate,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<Map<String, dynamic>> getHealthStatistics({
    required _i6.DateRangeType? period,
    DateTime? startDate,
    DateTime? endDate,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getHealthStatistics,
          [],
          {
            #period: period,
            #startDate: startDate,
            #endDate: endDate,
          },
        ),
        returnValue:
            _i4.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i4.Future<Map<String, dynamic>>);

  @override
  _i4.Future<void> setBackgroundSyncEnabled(bool? enabled) =>
      (super.noSuchMethod(
        Invocation.method(
          #setBackgroundSyncEnabled,
          [enabled],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<DateTime?> getLastSyncTime() => (super.noSuchMethod(
        Invocation.method(
          #getLastSyncTime,
          [],
        ),
        returnValue: _i4.Future<DateTime?>.value(),
      ) as _i4.Future<DateTime?>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [HealthLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockHealthLocalDataSource extends _i1.Mock
    implements _i7.HealthLocalDataSource {
  MockHealthLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get dataCount => (super.noSuchMethod(
        Invocation.getter(#dataCount),
        returnValue: 0,
      ) as int);

  @override
  _i4.Future<void> initialize() => (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> initializeForTest() => (super.noSuchMethod(
        Invocation.method(
          #initializeForTest,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> saveHealthData(_i5.HealthData? healthData) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveHealthData,
          [healthData],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> saveHealthDataList(List<_i5.HealthData>? healthDataList) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveHealthDataList,
          [healthDataList],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<_i5.HealthData?> getHealthData(DateTime? date) =>
      (super.noSuchMethod(
        Invocation.method(
          #getHealthData,
          [date],
        ),
        returnValue: _i4.Future<_i5.HealthData?>.value(),
      ) as _i4.Future<_i5.HealthData?>);

  @override
  _i4.Future<List<_i5.HealthData>> getHealthDataRange(
    DateTime? startDate,
    DateTime? endDate,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getHealthDataRange,
          [
            startDate,
            endDate,
          ],
        ),
        returnValue: _i4.Future<List<_i5.HealthData>>.value(<_i5.HealthData>[]),
      ) as _i4.Future<List<_i5.HealthData>>);

  @override
  _i4.Future<_i5.HealthData?> getLatestHealthData() => (super.noSuchMethod(
        Invocation.method(
          #getLatestHealthData,
          [],
        ),
        returnValue: _i4.Future<_i5.HealthData?>.value(),
      ) as _i4.Future<_i5.HealthData?>);

  @override
  _i4.Future<List<_i5.HealthData>> getPendingSyncData() => (super.noSuchMethod(
        Invocation.method(
          #getPendingSyncData,
          [],
        ),
        returnValue: _i4.Future<List<_i5.HealthData>>.value(<_i5.HealthData>[]),
      ) as _i4.Future<List<_i5.HealthData>>);

  @override
  _i4.Future<void> deleteHealthData(DateTime? date) => (super.noSuchMethod(
        Invocation.method(
          #deleteHealthData,
          [date],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> deleteHealthDataRange(
    DateTime? startDate,
    DateTime? endDate,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteHealthDataRange,
          [
            startDate,
            endDate,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> clearAllHealthData() => (super.noSuchMethod(
        Invocation.method(
          #clearAllHealthData,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  bool hasData(DateTime? date) => (super.noSuchMethod(
        Invocation.method(
          #hasData,
          [date],
        ),
        returnValue: false,
      ) as bool);

  @override
  _i4.Future<Map<String, dynamic>> getStatistics() => (super.noSuchMethod(
        Invocation.method(
          #getStatistics,
          [],
        ),
        returnValue:
            _i4.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i4.Future<Map<String, dynamic>>);

  @override
  _i4.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [HealthApiDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockHealthApiDataSource extends _i1.Mock
    implements _i8.HealthApiDataSource {
  MockHealthApiDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<bool> requestHealthPermission() => (super.noSuchMethod(
        Invocation.method(
          #requestHealthPermission,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<bool> hasHealthPermission() => (super.noSuchMethod(
        Invocation.method(
          #hasHealthPermission,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<_i5.HealthData?> getHealthDataForDate(DateTime? date) =>
      (super.noSuchMethod(
        Invocation.method(
          #getHealthDataForDate,
          [date],
        ),
        returnValue: _i4.Future<_i5.HealthData?>.value(),
      ) as _i4.Future<_i5.HealthData?>);

  @override
  _i4.Future<List<_i5.HealthData>> getHealthDataRange(
    DateTime? startDate,
    DateTime? endDate,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getHealthDataRange,
          [
            startDate,
            endDate,
          ],
        ),
        returnValue: _i4.Future<List<_i5.HealthData>>.value(<_i5.HealthData>[]),
      ) as _i4.Future<List<_i5.HealthData>>);

  @override
  _i4.Future<_i5.HealthData?> getTodayHealthData() => (super.noSuchMethod(
        Invocation.method(
          #getTodayHealthData,
          [],
        ),
        returnValue: _i4.Future<_i5.HealthData?>.value(),
      ) as _i4.Future<_i5.HealthData?>);

  @override
  _i4.Future<_i5.HealthData?> getLatestHealthData() => (super.noSuchMethod(
        Invocation.method(
          #getLatestHealthData,
          [],
        ),
        returnValue: _i4.Future<_i5.HealthData?>.value(),
      ) as _i4.Future<_i5.HealthData?>);

  @override
  _i4.Future<void> syncHealthData() => (super.noSuchMethod(
        Invocation.method(
          #syncHealthData,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [GetStepDataUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetStepDataUseCase extends _i1.Mock
    implements _i9.GetStepDataUseCase {
  MockGetStepDataUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i5.HealthData>> call({
    required DateTime? startDate,
    required DateTime? endDate,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
          {
            #startDate: startDate,
            #endDate: endDate,
          },
        ),
        returnValue: _i4.Future<List<_i5.HealthData>>.value(<_i5.HealthData>[]),
      ) as _i4.Future<List<_i5.HealthData>>);

  @override
  _i4.Future<_i5.HealthData?> getTodayStepData() => (super.noSuchMethod(
        Invocation.method(
          #getTodayStepData,
          [],
        ),
        returnValue: _i4.Future<_i5.HealthData?>.value(),
      ) as _i4.Future<_i5.HealthData?>);

  @override
  _i4.Future<_i5.HealthData?> getStepDataForDate(DateTime? date) =>
      (super.noSuchMethod(
        Invocation.method(
          #getStepDataForDate,
          [date],
        ),
        returnValue: _i4.Future<_i5.HealthData?>.value(),
      ) as _i4.Future<_i5.HealthData?>);

  @override
  _i4.Stream<List<_i5.HealthData>> watchStepData({
    required DateTime? startDate,
    required DateTime? endDate,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #watchStepData,
          [],
          {
            #startDate: startDate,
            #endDate: endDate,
          },
        ),
        returnValue: _i4.Stream<List<_i5.HealthData>>.empty(),
      ) as _i4.Stream<List<_i5.HealthData>>);

  @override
  _i4.Stream<_i5.HealthData?> watchTodayStepData() => (super.noSuchMethod(
        Invocation.method(
          #watchTodayStepData,
          [],
        ),
        returnValue: _i4.Stream<_i5.HealthData?>.empty(),
      ) as _i4.Stream<_i5.HealthData?>);

  @override
  _i4.Future<List<_i5.HealthData>> getWeeklyStepData(DateTime? weekStart) =>
      (super.noSuchMethod(
        Invocation.method(
          #getWeeklyStepData,
          [weekStart],
        ),
        returnValue: _i4.Future<List<_i5.HealthData>>.value(<_i5.HealthData>[]),
      ) as _i4.Future<List<_i5.HealthData>>);

  @override
  _i4.Future<List<_i5.HealthData>> getMonthlyStepData(
    int? year,
    int? month,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMonthlyStepData,
          [
            year,
            month,
          ],
        ),
        returnValue: _i4.Future<List<_i5.HealthData>>.value(<_i5.HealthData>[]),
      ) as _i4.Future<List<_i5.HealthData>>);

  @override
  _i4.Future<List<_i5.HealthData>> getYearlyStepData(int? year) =>
      (super.noSuchMethod(
        Invocation.method(
          #getYearlyStepData,
          [year],
        ),
        returnValue: _i4.Future<List<_i5.HealthData>>.value(<_i5.HealthData>[]),
      ) as _i4.Future<List<_i5.HealthData>>);
}

/// A class which mocks [CalculateActivityLevelUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockCalculateActivityLevelUseCase extends _i1.Mock
    implements _i10.CalculateActivityLevelUseCase {
  MockCalculateActivityLevelUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i11.ActivityLevel calculateLevel(
    int? stepCount, {
    int? goalSteps = 8000,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #calculateLevel,
          [stepCount],
          {#goalSteps: goalSteps},
        ),
        returnValue: _i11.ActivityLevel.none,
      ) as _i11.ActivityLevel);

  @override
  _i2.ActivityVisualization createVisualization(
    _i5.HealthData? healthData, {
    int? goalSteps = 8000,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createVisualization,
          [healthData],
          {#goalSteps: goalSteps},
        ),
        returnValue: _FakeActivityVisualization_0(
          this,
          Invocation.method(
            #createVisualization,
            [healthData],
            {#goalSteps: goalSteps},
          ),
        ),
      ) as _i2.ActivityVisualization);

  @override
  List<_i2.ActivityVisualization> createVisualizationList({
    required List<_i5.HealthData>? healthDataList,
    required DateTime? startDate,
    required DateTime? endDate,
    int? goalSteps = 8000,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createVisualizationList,
          [],
          {
            #healthDataList: healthDataList,
            #startDate: startDate,
            #endDate: endDate,
            #goalSteps: goalSteps,
          },
        ),
        returnValue: <_i2.ActivityVisualization>[],
      ) as List<_i2.ActivityVisualization>);

  @override
  List<List<_i2.ActivityVisualization>> createYearlyGrid({
    required int? year,
    required List<_i5.HealthData>? healthDataList,
    int? goalSteps = 8000,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createYearlyGrid,
          [],
          {
            #year: year,
            #healthDataList: healthDataList,
            #goalSteps: goalSteps,
          },
        ),
        returnValue: <List<_i2.ActivityVisualization>>[],
      ) as List<List<_i2.ActivityVisualization>>);

  @override
  Map<String, dynamic> calculateStatistics(
          List<_i2.ActivityVisualization>? visualizations) =>
      (super.noSuchMethod(
        Invocation.method(
          #calculateStatistics,
          [visualizations],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);
}

/// A class which mocks [SyncHealthDataUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSyncHealthDataUseCase extends _i1.Mock
    implements _i12.SyncHealthDataUseCase {
  MockSyncHealthDataUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<bool> call() => (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<bool> requestPermissionAndSync() => (super.noSuchMethod(
        Invocation.method(
          #requestPermissionAndSync,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<bool> setBackgroundSync(bool? enabled) => (super.noSuchMethod(
        Invocation.method(
          #setBackgroundSync,
          [enabled],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Stream<_i6.SyncStatus> watchSyncStatus() => (super.noSuchMethod(
        Invocation.method(
          #watchSyncStatus,
          [],
        ),
        returnValue: _i4.Stream<_i6.SyncStatus>.empty(),
      ) as _i4.Stream<_i6.SyncStatus>);

  @override
  _i4.Future<DateTime?> getLastSyncTime() => (super.noSuchMethod(
        Invocation.method(
          #getLastSyncTime,
          [],
        ),
        returnValue: _i4.Future<DateTime?>.value(),
      ) as _i4.Future<DateTime?>);

  @override
  _i4.Future<bool> needsSync({int? maxHoursSinceLastSync = 24}) =>
      (super.noSuchMethod(
        Invocation.method(
          #needsSync,
          [],
          {#maxHoursSinceLastSync: maxHoursSinceLastSync},
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<bool> autoSync({int? maxHoursSinceLastSync = 24}) =>
      (super.noSuchMethod(
        Invocation.method(
          #autoSync,
          [],
          {#maxHoursSinceLastSync: maxHoursSinceLastSync},
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<bool> forceSync() => (super.noSuchMethod(
        Invocation.method(
          #forceSync,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<bool> clearLocalData({
    DateTime? startDate,
    DateTime? endDate,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #clearLocalData,
          [],
          {
            #startDate: startDate,
            #endDate: endDate,
          },
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<Map<String, dynamic>> getSyncErrorInfo() => (super.noSuchMethod(
        Invocation.method(
          #getSyncErrorInfo,
          [],
        ),
        returnValue:
            _i4.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i4.Future<Map<String, dynamic>>);
}
