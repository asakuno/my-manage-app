// Mocks generated by Mockito 5.4.5 from annotations
// in frontend/test/presentation/provider/subscription_provider_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:frontend/data/local/subscription_local_data_source.dart' as _i7;
import 'package:frontend/data/repository/subscription_repository_impl.dart'
    as _i3;
import 'package:frontend/domain/core/entity/subscription_status.dart' as _i2;
import 'package:frontend/domain/core/type/subscription_type.dart' as _i5;
import 'package:frontend/domain/subscription/repository/subscription_repository.dart'
    as _i6;
import 'package:frontend/domain/subscription/usecase/purchase_subscription_usecase.dart'
    as _i8;
import 'package:frontend/domain/subscription/usecase/verify_subscription_usecase.dart'
    as _i9;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeSubscriptionStatus_0 extends _i1.SmartFake
    implements _i2.SubscriptionStatus {
  _FakeSubscriptionStatus_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [SubscriptionRepositoryImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockSubscriptionRepositoryImpl extends _i1.Mock
    implements _i3.SubscriptionRepositoryImpl {
  MockSubscriptionRepositoryImpl() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.SubscriptionStatus> getSubscriptionStatus() =>
      (super.noSuchMethod(
        Invocation.method(
          #getSubscriptionStatus,
          [],
        ),
        returnValue:
            _i4.Future<_i2.SubscriptionStatus>.value(_FakeSubscriptionStatus_0(
          this,
          Invocation.method(
            #getSubscriptionStatus,
            [],
          ),
        )),
      ) as _i4.Future<_i2.SubscriptionStatus>);

  @override
  _i4.Future<bool> purchaseSubscription(_i5.SubscriptionType? type) =>
      (super.noSuchMethod(
        Invocation.method(
          #purchaseSubscription,
          [type],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<bool> verifySubscription() => (super.noSuchMethod(
        Invocation.method(
          #verifySubscription,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<bool> restorePurchases() => (super.noSuchMethod(
        Invocation.method(
          #restorePurchases,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<bool> cancelSubscription() => (super.noSuchMethod(
        Invocation.method(
          #cancelSubscription,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<List<_i5.SubscriptionType>> getAvailableSubscriptions() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAvailableSubscriptions,
          [],
        ),
        returnValue: _i4.Future<List<_i5.SubscriptionType>>.value(
            <_i5.SubscriptionType>[]),
      ) as _i4.Future<List<_i5.SubscriptionType>>);

  @override
  _i4.Future<bool> hasFeature(_i5.PremiumFeature? feature) =>
      (super.noSuchMethod(
        Invocation.method(
          #hasFeature,
          [feature],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Stream<_i2.SubscriptionStatus> watchSubscriptionStatus() =>
      (super.noSuchMethod(
        Invocation.method(
          #watchSubscriptionStatus,
          [],
        ),
        returnValue: _i4.Stream<_i2.SubscriptionStatus>.empty(),
      ) as _i4.Stream<_i2.SubscriptionStatus>);

  @override
  _i4.Stream<_i6.PurchaseStatus> watchPurchaseStatus() => (super.noSuchMethod(
        Invocation.method(
          #watchPurchaseStatus,
          [],
        ),
        returnValue: _i4.Stream<_i6.PurchaseStatus>.empty(),
      ) as _i4.Stream<_i6.PurchaseStatus>);

  @override
  _i4.Future<Map<String, dynamic>?> getSubscriptionPrice(
          _i5.SubscriptionType? type) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSubscriptionPrice,
          [type],
        ),
        returnValue: _i4.Future<Map<String, dynamic>?>.value(),
      ) as _i4.Future<Map<String, dynamic>?>);

  @override
  _i4.Future<bool> applyPromoCode(String? promoCode) => (super.noSuchMethod(
        Invocation.method(
          #applyPromoCode,
          [promoCode],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<bool> setAutoRenew(bool? enabled) => (super.noSuchMethod(
        Invocation.method(
          #setAutoRenew,
          [enabled],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<List<_i6.PurchaseHistory>> getPurchaseHistory() =>
      (super.noSuchMethod(
        Invocation.method(
          #getPurchaseHistory,
          [],
        ),
        returnValue: _i4.Future<List<_i6.PurchaseHistory>>.value(
            <_i6.PurchaseHistory>[]),
      ) as _i4.Future<List<_i6.PurchaseHistory>>);

  @override
  _i4.Future<Map<String, dynamic>> getSubscriptionDetails() =>
      (super.noSuchMethod(
        Invocation.method(
          #getSubscriptionDetails,
          [],
        ),
        returnValue:
            _i4.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i4.Future<Map<String, dynamic>>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [SubscriptionLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockSubscriptionLocalDataSource extends _i1.Mock
    implements _i7.SubscriptionLocalDataSource {
  MockSubscriptionLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get hasSubscriptionData => (super.noSuchMethod(
        Invocation.getter(#hasSubscriptionData),
        returnValue: false,
      ) as bool);

  @override
  int get purchaseHistoryCount => (super.noSuchMethod(
        Invocation.getter(#purchaseHistoryCount),
        returnValue: 0,
      ) as int);

  @override
  _i4.Future<void> initialize() => (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> initializeForTest() => (super.noSuchMethod(
        Invocation.method(
          #initializeForTest,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> saveSubscriptionStatus(_i2.SubscriptionStatus? status) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveSubscriptionStatus,
          [status],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<_i2.SubscriptionStatus?> getSubscriptionStatus() =>
      (super.noSuchMethod(
        Invocation.method(
          #getSubscriptionStatus,
          [],
        ),
        returnValue: _i4.Future<_i2.SubscriptionStatus?>.value(),
      ) as _i4.Future<_i2.SubscriptionStatus?>);

  @override
  _i4.Future<void> savePurchaseHistory(List<_i2.SubscriptionStatus>? history) =>
      (super.noSuchMethod(
        Invocation.method(
          #savePurchaseHistory,
          [history],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<List<_i2.SubscriptionStatus>> getPurchaseHistory() =>
      (super.noSuchMethod(
        Invocation.method(
          #getPurchaseHistory,
          [],
        ),
        returnValue: _i4.Future<List<_i2.SubscriptionStatus>>.value(
            <_i2.SubscriptionStatus>[]),
      ) as _i4.Future<List<_i2.SubscriptionStatus>>);

  @override
  _i4.Future<List<_i2.SubscriptionStatus>> getPurchaseHistoryByProductId(
          String? productId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPurchaseHistoryByProductId,
          [productId],
        ),
        returnValue: _i4.Future<List<_i2.SubscriptionStatus>>.value(
            <_i2.SubscriptionStatus>[]),
      ) as _i4.Future<List<_i2.SubscriptionStatus>>);

  @override
  _i4.Future<_i2.SubscriptionStatus?> getLatestActiveSubscription() =>
      (super.noSuchMethod(
        Invocation.method(
          #getLatestActiveSubscription,
          [],
        ),
        returnValue: _i4.Future<_i2.SubscriptionStatus?>.value(),
      ) as _i4.Future<_i2.SubscriptionStatus?>);

  @override
  _i4.Future<bool> hasFeature(_i5.PremiumFeature? feature) =>
      (super.noSuchMethod(
        Invocation.method(
          #hasFeature,
          [feature],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<bool> isSubscriptionExpired() => (super.noSuchMethod(
        Invocation.method(
          #isSubscriptionExpired,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<bool> isInTrial() => (super.noSuchMethod(
        Invocation.method(
          #isInTrial,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<int> getDaysRemaining() => (super.noSuchMethod(
        Invocation.method(
          #getDaysRemaining,
          [],
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);

  @override
  _i4.Future<int> getMaxFriendsCount() => (super.noSuchMethod(
        Invocation.method(
          #getMaxFriendsCount,
          [],
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);

  @override
  _i4.Future<bool> shouldShowAds() => (super.noSuchMethod(
        Invocation.method(
          #shouldShowAds,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<void> resetToFreeSubscription() => (super.noSuchMethod(
        Invocation.method(
          #resetToFreeSubscription,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> clearPurchaseHistory() => (super.noSuchMethod(
        Invocation.method(
          #clearPurchaseHistory,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> clearAllSubscriptionData() => (super.noSuchMethod(
        Invocation.method(
          #clearAllSubscriptionData,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<Map<String, dynamic>> getSubscriptionStatistics() =>
      (super.noSuchMethod(
        Invocation.method(
          #getSubscriptionStatistics,
          [],
        ),
        returnValue:
            _i4.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i4.Future<Map<String, dynamic>>);

  @override
  _i4.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [PurchaseSubscriptionUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockPurchaseSubscriptionUseCase extends _i1.Mock
    implements _i8.PurchaseSubscriptionUseCase {
  MockPurchaseSubscriptionUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<bool> call(_i5.SubscriptionType? type) => (super.noSuchMethod(
        Invocation.method(
          #call,
          [type],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<List<_i5.SubscriptionType>> getAvailableSubscriptions() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAvailableSubscriptions,
          [],
        ),
        returnValue: _i4.Future<List<_i5.SubscriptionType>>.value(
            <_i5.SubscriptionType>[]),
      ) as _i4.Future<List<_i5.SubscriptionType>>);

  @override
  _i4.Future<Map<String, dynamic>?> getSubscriptionPrice(
          _i5.SubscriptionType? type) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSubscriptionPrice,
          [type],
        ),
        returnValue: _i4.Future<Map<String, dynamic>?>.value(),
      ) as _i4.Future<Map<String, dynamic>?>);

  @override
  _i4.Future<bool> validatePurchase(_i5.SubscriptionType? type) =>
      (super.noSuchMethod(
        Invocation.method(
          #validatePurchase,
          [type],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Stream<_i6.PurchaseStatus> watchPurchaseStatus() => (super.noSuchMethod(
        Invocation.method(
          #watchPurchaseStatus,
          [],
        ),
        returnValue: _i4.Stream<_i6.PurchaseStatus>.empty(),
      ) as _i4.Stream<_i6.PurchaseStatus>);

  @override
  _i4.Future<bool> applyPromoCode(String? promoCode) => (super.noSuchMethod(
        Invocation.method(
          #applyPromoCode,
          [promoCode],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<bool> canMakePurchases() => (super.noSuchMethod(
        Invocation.method(
          #canMakePurchases,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<List<_i6.PurchaseHistory>> getPurchaseHistory() =>
      (super.noSuchMethod(
        Invocation.method(
          #getPurchaseHistory,
          [],
        ),
        returnValue: _i4.Future<List<_i6.PurchaseHistory>>.value(
            <_i6.PurchaseHistory>[]),
      ) as _i4.Future<List<_i6.PurchaseHistory>>);

  @override
  _i4.Future<Map<String, dynamic>> getPurchaseErrorInfo() =>
      (super.noSuchMethod(
        Invocation.method(
          #getPurchaseErrorInfo,
          [],
        ),
        returnValue:
            _i4.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i4.Future<Map<String, dynamic>>);
}

/// A class which mocks [VerifySubscriptionUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockVerifySubscriptionUseCase extends _i1.Mock
    implements _i9.VerifySubscriptionUseCase {
  MockVerifySubscriptionUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<bool> call() => (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<_i2.SubscriptionStatus> getSubscriptionStatus() =>
      (super.noSuchMethod(
        Invocation.method(
          #getSubscriptionStatus,
          [],
        ),
        returnValue:
            _i4.Future<_i2.SubscriptionStatus>.value(_FakeSubscriptionStatus_0(
          this,
          Invocation.method(
            #getSubscriptionStatus,
            [],
          ),
        )),
      ) as _i4.Future<_i2.SubscriptionStatus>);

  @override
  _i4.Future<bool> restorePurchases() => (super.noSuchMethod(
        Invocation.method(
          #restorePurchases,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<bool> hasFeature(_i5.PremiumFeature? feature) =>
      (super.noSuchMethod(
        Invocation.method(
          #hasFeature,
          [feature],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Stream<_i2.SubscriptionStatus> watchSubscriptionStatus() =>
      (super.noSuchMethod(
        Invocation.method(
          #watchSubscriptionStatus,
          [],
        ),
        returnValue: _i4.Stream<_i2.SubscriptionStatus>.empty(),
      ) as _i4.Stream<_i2.SubscriptionStatus>);

  @override
  _i4.Future<bool> isSubscriptionActive() => (super.noSuchMethod(
        Invocation.method(
          #isSubscriptionActive,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<bool> isPremiumActive() => (super.noSuchMethod(
        Invocation.method(
          #isPremiumActive,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<int> getDaysRemaining() => (super.noSuchMethod(
        Invocation.method(
          #getDaysRemaining,
          [],
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);

  @override
  _i4.Future<Map<String, dynamic>> getSubscriptionDetails() =>
      (super.noSuchMethod(
        Invocation.method(
          #getSubscriptionDetails,
          [],
        ),
        returnValue:
            _i4.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i4.Future<Map<String, dynamic>>);

  @override
  _i4.Future<bool> setAutoRenew(bool? enabled) => (super.noSuchMethod(
        Invocation.method(
          #setAutoRenew,
          [enabled],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<bool> cancelSubscription() => (super.noSuchMethod(
        Invocation.method(
          #cancelSubscription,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<bool> isSubscriptionExpired() => (super.noSuchMethod(
        Invocation.method(
          #isSubscriptionExpired,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<bool> isInTrial() => (super.noSuchMethod(
        Invocation.method(
          #isInTrial,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<int> getMaxFriendsCount() => (super.noSuchMethod(
        Invocation.method(
          #getMaxFriendsCount,
          [],
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);

  @override
  _i4.Future<bool> shouldShowAds() => (super.noSuchMethod(
        Invocation.method(
          #shouldShowAds,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<Map<String, dynamic>> getVerificationInfo() => (super.noSuchMethod(
        Invocation.method(
          #getVerificationInfo,
          [],
        ),
        returnValue:
            _i4.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i4.Future<Map<String, dynamic>>);
}
